### This file was autogenerated by Nexus 0.11.6
### Do not make changes to this file directly


type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: ID!
  parent: Comment
  updatedAt: DateTime!
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentsInput!
  content: String!
  id: ID
  parent: CommentCreateOneInput
}

input CommentCreateManyInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateOneInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateInput
}

input CommentCreateWithoutAuthorInput {
  content: String!
  id: ID
  parent: CommentCreateOneInput
}

enum CommentOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  parent: CommentWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Group {
  createdAt: DateTime!
  id: ID!
  name: String!
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
  users(after: String, before: String, first: Int, last: Int, orderBy: UserGroupMembershipOrderByInput, skip: Int, where: UserGroupMembershipWhereInput): [UserGroupMembership!]
}

input GroupCreateOneWithoutPostsInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutPostsInput
}

input GroupCreateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
}

input GroupCreateWithoutPostsInput {
  id: ID
  name: String!
  users: UserGroupMembershipCreateManyWithoutGroupInput
}

input GroupCreateWithoutUsersInput {
  id: ID
  name: String!
  posts: PostCreateManyWithoutGroupInput
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  posts_every: PostWhereInput
  posts_none: PostWhereInput
  posts_some: PostWhereInput
  users_every: UserGroupMembershipWhereInput
  users_none: UserGroupMembershipWhereInput
  users_some: UserGroupMembershipWhereInput
}

input GroupWhereUniqueInput {
  id: ID
}

type Mutation {
  createDraft(authorId: ID, content: String, title: String): Post!
  createUser(data: UserCreateInput!): User!
  deletePost(where: PostWhereUniqueInput!): Post
  publish(id: ID): Post
}

type Post {
  author: User!
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, skip: Int, where: CommentWhereInput): [Comment!]
  content: String!
  createdAt: DateTime!
  group: Group
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateManyWithoutGroupInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutGroupInput!]
}

input PostCreateWithoutAuthorInput {
  comments: CommentCreateManyInput
  content: String!
  group: GroupCreateOneWithoutPostsInput
  id: ID
  published: Boolean
  title: String!
}

input PostCreateWithoutGroupInput {
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyInput
  content: String!
  id: ID
  published: Boolean
  title: String!
}

enum PostOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_none: CommentWhereInput
  comments_some: CommentWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  group: GroupWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: Boolean
  published_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  feed: [Post!]!
  post(where: PostWhereUniqueInput!): Post
  postsByUser(email: String): [Post!]!
}

enum Role {
  ADMIN
  USER
}

type User {
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, skip: Int, where: CommentWhereInput): [Comment!]
  createdAt: DateTime!
  email: String
  groups(after: String, before: String, first: Int, last: Int, orderBy: UserGroupMembershipOrderByInput, skip: Int, where: UserGroupMembershipWhereInput): [UserGroupMembership!]
  id: ID!
  name: String!
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
}

input UserCreateInput {
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  groups: UserGroupMembershipCreateManyWithoutUserInput
  id: ID
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutGroupsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutGroupsInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutCommentsInput {
  email: String
  groups: UserGroupMembershipCreateManyWithoutUserInput
  id: ID
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutGroupsInput {
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  id: ID
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  comments: CommentCreateManyWithoutAuthorInput
  email: String
  groups: UserGroupMembershipCreateManyWithoutUserInput
  id: ID
  name: String!
}

type UserGroupMembership {
  group: Group!
  id: ID!
  joined: DateTime!
  role: Role!
  user: User!
}

input UserGroupMembershipCreateManyWithoutGroupInput {
  connect: [UserGroupMembershipWhereUniqueInput!]
  create: [UserGroupMembershipCreateWithoutGroupInput!]
}

input UserGroupMembershipCreateManyWithoutUserInput {
  connect: [UserGroupMembershipWhereUniqueInput!]
  create: [UserGroupMembershipCreateWithoutUserInput!]
}

input UserGroupMembershipCreateWithoutGroupInput {
  id: ID
  joined: DateTime!
  role: Role
  user: UserCreateOneWithoutGroupsInput!
}

input UserGroupMembershipCreateWithoutUserInput {
  group: GroupCreateOneWithoutUsersInput!
  id: ID
  joined: DateTime!
  role: Role
}

enum UserGroupMembershipOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  joined_ASC
  joined_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserGroupMembershipWhereInput {
  AND: [UserGroupMembershipWhereInput!]
  group: GroupWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  joined: DateTime
  joined_gt: DateTime
  joined_gte: DateTime
  joined_in: [DateTime!]
  joined_lt: DateTime
  joined_lte: DateTime
  joined_not: DateTime
  joined_not_in: [DateTime!]
  NOT: [UserGroupMembershipWhereInput!]
  OR: [UserGroupMembershipWhereInput!]
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
  user: UserWhereInput
}

input UserGroupMembershipWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  comments_every: CommentWhereInput
  comments_none: CommentWhereInput
  comments_some: CommentWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  groups_every: UserGroupMembershipWhereInput
  groups_none: UserGroupMembershipWhereInput
  groups_some: UserGroupMembershipWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts_every: PostWhereInput
  posts_none: PostWhereInput
  posts_some: PostWhereInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
